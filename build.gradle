import java.text.SimpleDateFormat

group = 'com.hltech'

buildscript {
    ext {
        repos = {
            gradlePluginPortal()
            mavenLocal()
            mavenCentral()
        }
        groovyAllVersion = '2.4.13'
        lombokVersion = '1.18.2'
        spockVersion = '1.1-groovy-2.4'
        spockReportsVersion = '1.4.0'
        grgitVersion = '2.2.0'
        coverallsVersion = '2.8.2'
        disruptorVersion = '3.4.0'
        reflectionsVersion = '0.9.11'
        feignVersion = '2.0.1.RELEASE'
        jacksonVersion = '2.9.6'
        podamVersion = '7.2.0.RELEASE'
        cglibNodepVersion = '3.2.5'
        axionReleasePluginVersion = '1.10.0'
        nexusStagingPluginVersion = '0.20.0'
        nexusPublishPluginVersion = '0.2.0'
        sonarqubePluginVersion = '2.7'
    }
    repositories (repos)
    dependencies {
        classpath "org.ajoberstar:grgit:$grgitVersion"
        classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:$coverallsVersion"
        classpath "pl.allegro.tech.build:axion-release-plugin:$axionReleasePluginVersion"
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:$nexusStagingPluginVersion"
        classpath "de.marcphilipp.gradle:nexus-publish-plugin:$nexusPublishPluginVersion"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:$sonarqubePluginVersion"
    }
}

repositories(repos)

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'groovy'
apply plugin: 'signing'
apply plugin: 'org.ajoberstar.grgit'
apply plugin: 'pl.allegro.tech.build.axion-release'
apply plugin: 'org.sonarqube'
apply from: 'gradle/test.gradle'
apply from: 'gradle/codequality.gradle'
apply from: 'gradle/publishing.gradle'

scmVersion {
    tag {
        prefix = 'pact-gen-release'
    }
}

project.version = scmVersion.version

jar.baseName = 'pact-gen'
sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile "com.lmax:disruptor:$disruptorVersion"
    compile "org.reflections:reflections:$reflectionsVersion"
    compile "org.springframework.cloud:spring-cloud-starter-openfeign:$feignVersion"
    compile "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
    compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    compile "uk.co.jemos.podam:podam:$podamVersion"

    compileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"
    testCompileOnly "org.projectlombok:lombok:$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"

    testCompile "org.codehaus.groovy:groovy-all:$groovyAllVersion"
    testCompile "org.spockframework:spock-core:$spockVersion"
    testCompile("com.athaydes:spock-reports:$spockReportsVersion") {
        transitive = false //this avoids affecting your version of Groovy/Spock in Spock reports
    }
    testCompile "cglib:cglib-nodep:$cglibNodepVersion"
}

javadoc {
    failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar, javadocJar, sourcesJar
}

Date buildTimeAndDate = new Date()
ext {
    buildTime = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildDate = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
}

jar {
    manifest {
        attributes(
            'Built-By': System.properties['user.name'],
            'Created-By': System.properties['java.version'] + " (" + System.properties['java.vendor'] + " " + System.getProperty("java.vm.version") + ")",
            'Build-Date': project.buildTime,
            'Build-Time': project.buildDate,
            'Specification-Title': project.name,
            'Specification-Version': project.version,
        )
    }
}

signing {
    required { gradle.taskGraph.hasTask("publish") }
    sign configurations.archives
}
